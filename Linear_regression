#As the model is only accurate after about 20 samples, and due to the high R2 score there is a possiblity of over fitting I will also run a linear regression
from sklearn.linear_model import LinearRegression

# create a linear regression object
lr = LinearRegression()

# fit the model to the training data
lr.fit(X_train, y_train)

# make predictions on the test data
y_pred_lr = lr.predict(X_test)

# evaluate the model performance
mse_lr = mean_squared_error(y_test, y_pred)
rmse_lr = np.sqrt(mse)
r2_lr = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE): {:.2f}".format(mse_lr))
print("Root Mean Squared Error (RMSE): {:.2f}".format(rmse_lr))
print("R2 score:", r2_lr)

#this again has an extremely high R2 score, so may be over fit

#to check for overfitting

kfold = KFold(n_splits=10, shuffle=True, random_state=15)
scores = cross_val_score(lr, X, y, cv=kfold, scoring='r2')
#the cross-validated scores are very similar, reducing the chance that the model is overfitted
print('Cross-validation scores:', scores)

train_sizes, train_scores, test_scores = learning_curve(lr, X, y, train_sizes=np.linspace(0.1, 1.0, 10), cv=5)
                                                        
train_mean = np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
test_mean = np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)
                                                        
plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training score')
plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')
plt.plot(train_sizes, test_mean, color='green', linestyle='--', marker='s', markersize=5, label='test score')
plt.fill_between(train_sizes, test_mean + test_std, test_mean - test_std, alpha=0.15, color='green')
plt.xlabel('Number of training samples')
plt.ylabel('Score')
plt.legend(loc='lower right')
plt.ylim([0.99, 1.01])
plt.show()
